#!/bin/bash

# Step 1: Install necessary dependencies
echo "Installing necessary dependencies..."
sudo apt update
sudo apt install -y default-jdk maven git

# Step 2: Clone the vulnerable banking application repository
echo "Cloning the vulnerable banking application repository..."
git clone https://github.com/vulnerable-banking-app/vulnerable-banking-app.git
cd vulnerable-banking-app

# Step 3: Add Log4j to the project dependencies
echo "Adding Log4j to the project dependencies..."
# Modify the pom.xml file of the banking application to include Log4j vulnerability (e.g., version 2.15.0)
sed -i 's|</dependencies>|<dependency>\n<groupId>org.apache.logging.log4j</groupId>\n<artifactId>log4j-core</artifactId>\n<version>2.15.0</version>\n</dependency>\n</dependencies>|g' pom.xml

# Step 4: Build the application
echo "Building the vulnerable banking application..."
mvn clean package

# Step 5: Set up the database
echo "Setting up the database..."
# Follow the instructions in the banking application's README to set up the database schema and populate it with test data.

# Step 6: Configure Log4j to be vulnerable
echo "Configuring Log4j to be vulnerable..."
# Edit the Log4j configuration file (e.g., log4j2.xml) to include a vulnerable pattern layout or appenders that could be exploited (e.g., using JNDI injection).

# Step 7: Deploy the application
echo "Deploying the vulnerable banking application..."
# Deploy the application to a servlet container like Apache Tomcat or Jetty.

# Step 8: Start the servlet container
echo "Starting the servlet container..."
# Start the servlet container where the vulnerable banking application is deployed.

echo "Vulnerable banking application setup completed successfully!"
